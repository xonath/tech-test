<?php

namespace Tests\Feature;

use Tests\TestCase;

class SearchTest extends TestCase
{
    use BaseSetupTrait;

    protected array $goodHeader;
    protected array $badHeader;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->goodHeader = ['auth_token' => config('app.auth_token')];
        $this->badHeader = ['auth_token' => 'this-is-a-bad-token'];

        $this->setupBaseData();
    }

    public function test_we_can_search_for_nearby_stores_all(): void
    {
        $response = $this->getJson(route('search-store', ['type'=> 'all', 'postcode' => 'AB11QN', 'distance' => 2]), $this->goodHeader)
            ->assertOk()
            ->json();

        $this->assertCount(3, $response['data']);
    }

    public function test_we_can_search_for_nearby_stores_takeaways(): void
    {
        $response = $this->getJson(route('search-store', ['type'=> 'takeaway', 'postcode' => 'AB11QN', 'distance' => 2]), $this->goodHeader)
            ->assertOk()
            ->json();

        $this->assertCount(1, $response['data']);
    }


    public function test_failure_on_bad_access_token(): void
    {
        $this->getJson(route('search-store', ['type'=> 'takeaway', 'postcode' => 'AB11QN', 'distance' => 2]), $this->badHeader)
            ->assertUnauthorized();
    }

    public function test_we_can_search_for_will_delivery_to_a_postcode_all(): void
    {
        $response = $this->getJson(route('search-delivery', ['type'=> 'all', 'postcode' => 'AB11QN']), $this->goodHeader)
            ->assertOk()
            ->json();

        $this->assertCount(4, $response['data']);
    }

    public function test_we_can_search_for_will_delivery_to_a_postcode_takeaways(): void
    {
        $response = $this->getJson(route('search-delivery', ['type'=> 'takeaway', 'postcode' => 'AB11QN']), $this->goodHeader)
            ->assertOk()
            ->json();

        $this->assertCount(2, $response['data']);
    }
}
